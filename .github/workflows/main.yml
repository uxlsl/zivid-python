name: Main CI workflow
# Note: If the workflow name is changed, the CI badge URL in the README must also be updated

on:
  push:       # Push trigger runs on any pushed branch.
  schedule:   # Scheduled trigger runs on the latest commit on the default branch.
    - cron:  '0 22 * * *'

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          lfs: false
      - name: Build and lint on Archlinux
        run: | 
          docker run \
              --volume $PWD:/host \
              --workdir /host/continuous-integration/linux \
              --env "PYTHONDONTWRITEBYTECODE=1" \
              archlinux/base \
              bash -c "./setup.sh && ./build.sh && ./lint.sh"

  Create-source-dist:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          lfs: false
      - name: Create source distribution
        run: | 
          docker run \
              --volume $PWD:/host \
              --workdir /host/continuous-integration/linux \
              --env "PYTHONDONTWRITEBYTECODE=1" \
              ubuntu:20.04 \
              bash -c "./setup.sh && ./create-sdist.sh"
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: sdist
          path: dist/zivid*.tar.gz
          retention-days: 1

  Create-windows-binary-dist:
    runs-on: windows-2016
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          lfs: false
      - name: Set up Python ${{matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
      - name: Setup
        run: python continuous-integration\windows\setup.py
      - name: Create binary distribution
        env:
          Zivid_DIR: 'C:\Program Files\Zivid\CMake\Zivid'
          CXX: 'cl.exe'
          CC: 'cl.exe'
        run: python continuous-integration\windows\create_bdist.py
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bdist-win-python${{matrix.python-version}}
          path: dist/zivid*.whl
          retention-days: 1

  Test-linux-source-dist:
    needs: Create-source-dist
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ["ubuntu:16.04", "ubuntu:18.04", "ubuntu:20.04", "fedora:30", "archlinux/base"]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: sdist
          path: dist
      - name: Install from sdist and test
        run: | 
          docker run \
              --volume $PWD:/host \
              --workdir /host/continuous-integration/linux \
              --env "PYTHONDONTWRITEBYTECODE=1" \
              ${{matrix.os}} \
              bash -c "./setup.sh && ./install-sdist.sh && ./test.sh"

  Test-windows-binary-dist:
    needs: Create-windows-binary-dist
    runs-on: windows-2016
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: bdist-win-python${{matrix.python-version}}
          path: dist
      - name: Set up Python ${{matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
      - name: Setup 
        run: python continuous-integration\windows\setup.py
      - name: Install from binary dist
        run: python continuous-integration\windows\install_bdist.py
      - name: Test
        run: python continuous-integration\windows\test.py

  Deploy:
    needs: [Lint, Test-linux-source-dist, Test-windows-binary-dist]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          lfs: false
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Collect and check
        run: |
          docker run \
              --volume $PWD:/host \
              --workdir /host/continuous-integration/linux \
              --env "PYTHONDONTWRITEBYTECODE=1" \
              ubuntu:20.04 \
              bash -c "./collect-and-check-artifacts.sh"
      - name: Upload all as single artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist_all
          path: dist/
